// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// MODELS
model Organization {
    id                       String                     @id @default(cuid())
    name                     String
    users                    User[]
    customers                Customer[]
    customerUserProfiles     CustomerUserProfile[]
    invitations              Invitation[]
    createdAt                DateTime                   @default(now())
    updatedAt                DateTime                   @updatedAt
    CustomerUserProfileProto CustomerUserProfileProto[]
}

enum Role {
    // INTERNAL ADMIN
    SUPER_ADMIN
    // CUSTOMER ROLES
    USER
    ADMIN
    // CUSTOMER'S CUSTOMERS' ROLES
    CUSTOMER
}

// ALL USERS CONFORM TO THIS SCHEMA
model User {
    id                  String               @id @default(cuid())
    organizationId      String?
    organization        Organization?        @relation(fields: [organizationId], references: [id])
    customerUserProfile CustomerUserProfile?
    role                Role                 @default(USER)
    name                String?
    email               String?              @unique
    emailVerified       DateTime?
    image               String?
    accounts            Account[]
    sessions            Session[]
}

model Invitation {
    id             String        @id @default(cuid())
    organizationId String?
    organization   Organization? @relation(fields: [organizationId], references: [id])
    role           Role
    name           String
    email          String        @unique
    token          String        @unique
    used           Boolean       @default(false)
    createdAt      DateTime      @default(now())
}

model Customer {
    id               String                     @id @default(cuid())
    organizationId   String
    organization     Organization               @relation(fields: [organizationId], references: [id])
    name             String
    userProfiles     CustomerUserProfile[]
    userProfileProto CustomerUserProfileProto[]
    createdAt        DateTime                   @default(now())
    updatedAt        DateTime                   @updatedAt
}

model CustomerUserProfile {
    id             String       @id @default(cuid())
    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String
    userId         String       @unique
    user           User         @relation(fields: [userId], references: [id])
    customerId     String?
    customer       Customer?    @relation(fields: [customerId], references: [id])
}

model CustomerUserProfileProto {
    id             String       @id @default(cuid())
    name           String
    email          String       @unique
    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String
    customerId     String?
    customer       Customer?    @relation(fields: [customerId], references: [id])
}

//////////////////////////////////////////////////////////
// AUTH
//////////////////////////////////////////////////////////
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
